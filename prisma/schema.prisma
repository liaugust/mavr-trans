generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id String @id @unique @default(cuid())

  isAdmin Boolean @default(false) @map("is_admin") @db.Boolean()

  name          String    @db.VarChar(255)
  image         String?   @db.Text()
  password      String?   @db.VarChar(255)
  email         String    @unique @db.VarChar(255)
  phoneNumber   String?   @map("phone_number") @db.VarChar(255)
  emailVerified DateTime? @map("email_verified")

  rides Ride[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Account {
  id                 String  @id @unique @default(cuid())
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @unique @default(cuid())
  sessionToken String   @unique @map("session_token")
  expires      DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("sessions")
}

model VerificationToken {
  id         Int      @id @unique @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Car {
  id Int @id @unique @default(autoincrement()) @db.Integer()

  seats  Int     @db.Integer()
  name   String  @db.VarChar(50)
  image  String  @db.Text()
  active Boolean @default(true) @db.Boolean()

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  rides Ride[]

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int      @map("category_id") @db.Integer()

  @@map("cars")
}

model Category {
  id Int @id @unique @default(autoincrement()) @db.Integer()

  image       String? @db.Text()
  name        String  @db.VarChar(255)
  active      Boolean @default(true) @db.Boolean()
  coefficient Float   @default(1)

  cars Car[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  Ride      Ride[]

  @@map("categories")
}

model Option {
  id Int @id @unique @default(autoincrement()) @db.Integer()

  name   String  @db.VarChar(50)
  active Boolean @default(true) @db.Boolean()

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  rides Ride[]

  @@map("options")
}

enum Status {
  confirmed
  pending
}

model Waypoint {
  id Int @id @unique @default(autoincrement()) @db.Integer()

  fullAddress  String @map("full_address") @db.VarChar(255)
  shortAddress String @map("short_address") @db.VarChar(255)
  order        Int    @db.Integer()
  lng          Float
  lat          Float

  ride   Ride @relation(fields: [rideId], references: [id])
  rideId Int  @map("ride_id")

  @@map("waypoints")
}

model Ride {
  id Int @id @unique @default(autoincrement()) @db.Integer()

  car   Car? @relation(fields: [carId], references: [id], onDelete: SetNull)
  carId Int? @map("car_id") @db.Integer()

  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId Int?      @map("category_id") @db.Integer()

  carName      String @map("car_name") @db.VarChar(255)
  categoryName String @map("category_name") @db.VarChar(255)

  passengers Int @db.Integer()
  distance   Int @db.Integer()

  waypoints Waypoint[]

  departureDate DateTime @updatedAt @map("departure_date")
  arrivalDate   DateTime @updatedAt @map("arrival_date")

  options     Option[]
  optionNames String[] @map("option_names")

  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  confirmedAt DateTime? @map("confirmed_at")

  status Status @default(pending)
  total  Int    @default(0)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("rides")
}
